{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","s","container","FeedbackOptions","options","onLeaveFeedback","arr","key","push","type","button","onClick","toUpperCase","slice","Section","title","children","Notification","message","App","state","onClickFeedback","event","option","target","innerText","toLowerCase","setState","prevState","countTotalFeedback","totalFeedback","Math","round","this","percentage","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6SA6BeA,EAzBE,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,KAAKC,EAAwC,EAAxCA,QAAQC,EAAgC,EAAhCA,IAAIC,EAA4B,EAA5BA,MAAMC,EAAsB,EAAtBA,mBACtC,OACI,sBAAKC,UAAWC,IAAEC,UAAlB,UACA,4CACA,uCAAUP,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,W,gBCSOI,EAjBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC9BC,EAAM,GACV,IAAK,IAAIC,KAAOH,EACdE,EAAIE,KACF,wBAAQC,KAAK,SAAST,UAAWC,IAAES,OAAQC,QAASN,EAApD,SACGE,EAAI,GAAGK,YAAY,GAAKL,EAAIM,MAAM,MAIzC,OAAO,8BAAMP,KCGAQ,EAbD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,MAAMC,EAAY,EAAZA,SAClB,OACA,gCACC,6BAAKD,IACJC,MCSSC,EAbI,SAAC,GAAa,IAAZC,EAAW,EAAXA,QAEjB,OACI,4BAAIA,KCwDGC,E,4MAvDbC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPwB,gBAAkB,SAACC,GACjB,IAAMC,EAASD,EAAME,OAAOC,UAAUC,cACtC,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGL,EAASK,EAAUL,GAAU,O,EAI3CM,mBAAqB,WACnB,IAAI/B,EAAQ,EACZ,IAAK,IAAIS,KAAO,EAAKa,MACnBtB,GAAS,EAAKsB,MAAMb,GAEtB,OAAOT,G,qEAET,SAAgCgC,GAC9B,OAAyB,IAAlBA,EACH,EACAC,KAAKC,MAAyB,IAAlBC,KAAKb,MAAMzB,KAAcmC,K,oBAG3C,WAAU,IAAD,EACwBG,KAAKb,MAA5BzB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBiC,EAAgBG,KAAKJ,qBACrBK,EAAaD,KAAKE,gCAAgCL,GAClDT,EAAkBY,KAAKZ,gBAE7B,OACE,qBAAKrB,UAAU,MAAf,SACE,eAAC,EAAD,CAASe,MAAO,wBAAhB,UACE,cAAC,EAAD,CACEX,QAAS6B,KAAKb,MACdf,gBAAiBgB,IAElBS,EACC,cAAC,EAAD,CACEnC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgC,EACP/B,mBAAoBmC,IAGtB,cAAC,EAAD,CAAchB,QAAQ,+B,GAhDhBkB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,gC,kBCA9BD,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.d5b8db39.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css'\r\n\r\nconst Statistics=({good,neutral,bad,total,positivePercentage})=>{\r\n    return(\r\n        <div className={s.container}>\r\n        <h2>Statistics</h2>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total: {total}</p>\r\n        <p>Positive Feedback: {positivePercentage} </p>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n  };\r\n\r\n\r\n\r\n\r\nexport default Statistics\r\n\r\n","import React from \"react\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  let arr = [];\r\n  for (let key in options) {\r\n    arr.push(\r\n      <button type=\"button\" className={s.button} onClick={onLeaveFeedback}>\r\n        {key[0].toUpperCase(0) + key.slice(1)}\r\n      </button>\r\n    );\r\n  }\r\n  return <div>{arr}</div>;\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section=({title,children})=>{\r\n    return(\r\n    <div>\r\n     <h2>{title}</h2>\r\n     {children}\r\n     </div>\r\n    )\r\n}\r\n\r\nSection.propTypes={\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Section","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Notification=({message})=>{\r\n\r\n    return (\r\n        <p>{message}</p>\r\n    )\r\n}\r\n\r\nNotification.propTypes={\r\n    message:PropTypes.string.isRequired \r\n}\r\n\r\n\r\n\r\nexport default Notification","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Statistics from \"./components/Statistics\";\r\nimport FeedbackOptions from \"./components/FeedbackOptions\";\r\nimport Section from \"./components/Section\";\r\nimport Notification from \"./components/Notification\";\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  onClickFeedback = (event) => {\r\n    const option = event.target.innerText.toLowerCase();\r\n    this.setState((prevState) => {\r\n      return { [option]: prevState[option] + 1 };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    let total = 0;\r\n    for (let key in this.state) {\r\n      total += this.state[key];\r\n    }\r\n    return total;\r\n  };\r\n  countPositiveFeedbackPercentage(totalFeedback) {\r\n    return totalFeedback === 0\r\n      ? 0\r\n      : Math.round((this.state.good * 100) / totalFeedback);\r\n  }\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const totalFeedback = this.countTotalFeedback();\r\n    const percentage = this.countPositiveFeedbackPercentage(totalFeedback);\r\n    const onClickFeedback = this.onClickFeedback;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Section title={\"Please leave feedback\"}>\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={onClickFeedback}\r\n          />\r\n          {totalFeedback ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={totalFeedback}\r\n              positivePercentage={percentage}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Statistics_container__3NsIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2iHOW\"};"],"sourceRoot":""}